version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: productivity-postgres
    environment:
      POSTGRES_DB: productivity_tracker
      POSTGRES_USER: productivity_user
      POSTGRES_PASSWORD: productivity_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - productivity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productivity_user -d productivity_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Main API
  spring-backend:
    build:
      context: ./demo
      dockerfile: Dockerfile
    container_name: productivity-spring-api
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/productivity_tracker
      SPRING_DATASOURCE_USERNAME: productivity_user
      SPRING_DATASOURCE_PASSWORD: productivity_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRATION: 86400000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - productivity-network
    volumes:
      - ./demo/logs:/app/logs

  # Node.js Microservice
  nodejs-microservice:
    build:
      context: ./microservice
      dockerfile: Dockerfile
    container_name: productivity-nodejs-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    networks:
      - productivity-network
    volumes:
      - ./microservice/logs:/app/logs

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: productivity-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_MICROSERVICE_URL: http://localhost:3001
    depends_on:
      - spring-backend
      - nodejs-microservice
    networks:
      - productivity-network

volumes:
  postgres_data:

networks:
  productivity-network:
    driver: bridge
